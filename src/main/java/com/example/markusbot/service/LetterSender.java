package com.example.markusbot.service;

import com.example.markusbot.event.SendPhotoEvent;
import com.example.markusbot.event.SendTelegramMessageEvent;
import com.example.markusbot.model.OrderEntity;
import com.example.markusbot.model.QuestionEntity;
import com.example.markusbot.model.UserEntity;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Objects;

import static org.apache.commons.lang3.ObjectUtils.isEmpty;

@Service
@Slf4j
@RequiredArgsConstructor
public class LetterSender {

    private final ApplicationEventPublisher publisher;

    private final static String NEW_MANAGER_MESSAGE = """
            –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, %s, –í–∞—Å —Å–¥–µ–ª–∞–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤ –±–æ—Ç–µ 'GOLDEN 21' .\s
            –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /manager\s
                        
            –ß–µ—Ä–µ–∑ –Ω–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º\s
            –ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π! –° –ë–æ–≥–æ–º! üôè""";

    private final static String NEW_ADMIN_MESSAGE = """
            –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å, %s, –í–∞—Å —Å–¥–µ–ª–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –±–æ—Ç–µ 'GOLDEN 21' .\s
            –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /admin\s
                        
            –ß–µ—Ä–µ–∑ –Ω–µ–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∏—Å—Ç–µ–º—ã""";

    private final static String NEW_QUESTION = """
            –ü–æ—Å—Ç—É–ø–∏–ª –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s
            –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:
                        
            ¬´%s¬ª
            
            –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É: /manager
            """;

    private final static String ANSWER = """
            –ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ GOLDEN 21
                        
            –í–∞—à –≤–æ–ø—Ä–æ—Å –∑–≤—É—á–∞–ª —Ç–∞–∫:
            ¬´%s¬ª
                        
            –û—Ç–≤–µ—Ç:
            ¬´%s¬ª
            """;

    private final static String ORDER = """
            –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ GOLDEN 21!
            
            –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: GD%s
                        
            –ò–º—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ: %s
            –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: %s
            –§–∏–æ: %s
            –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s
            
            –¶–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö: %s
            –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: %s
            –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: %s
            –†–∞–∑–º–µ—Ä –ø–æ –ï–≤—Ä–æ–ø–µ–π—Å–∫–æ–π —à–∫–∞–ª–µ: %s
            –†–∞–∑–º–µ—Ä –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö: %s
            
            –í—Å–µ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ /manager
            """;

    private final static String LOG_TEMPLATE_ANSWER = "{} –æ—Ç–≤–µ—á–∞–µ—Ç {}: ({}) {}";

    public void letterNewOrder(OrderEntity order, List<UserEntity> managers) {
        var author = order.getAuthor();
        managers.forEach(manager -> publishWithPhoto(manager.getTelegramId(),
                List.of(order.getPhoto().getFileId(), order.getCheck().getFileId()),
                ORDER,
                order.getId(),
                author.getTelegramFirstName(),
                Objects.isNull(author.getTelegramUserName()) ? "–Ω–µ—Ç—É" : "@" + author.getTelegramUserName(),
                order.getFio(),
                order.getPhoneNumber(),
                order.getPricePoizon(),
                order.getPriceRub(),
                order.getAddress(),
                order.getSizeEurope(),
                order.getSizeSm()
        ));
    }

    public void letterNewAdmin(UserEntity user) {
        publishText(user.getTelegramId(), null, NEW_ADMIN_MESSAGE, user.getTelegramFirstName());
    }

    public void letterNewManager(UserEntity user) {
        publishText(user.getTelegramId(), null, NEW_MANAGER_MESSAGE, user.getTelegramFirstName());
    }

    public void letterNewQuestion(QuestionEntity question, List<UserEntity> managers) {
        log.info(question.getAuthor().getTelegramFirstName() + " –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å: " + question.getText());
        UserEntity user = question.getAuthor();
        String name = user.getTelegramFirstName() +  " " + (Objects.nonNull(user.getTelegramUserName()) ? "@" + user.getTelegramUserName() : "");
        managers.forEach(manager -> publishText(manager.getTelegramId(), null, NEW_QUESTION, name, question.getText()));
    }

    public void letterNewAnswer(QuestionEntity entity) {
        log.info(LOG_TEMPLATE_ANSWER, entity.getManager().getTelegramFirstName(), entity.getAuthor().getTelegramFirstName(), entity.getText(), entity.getAnswer());
        publishText(entity.getAuthor().getTelegramId(), null, ANSWER, entity.getText(), entity.getAnswer());
    }

    private void publishText(Long to, Integer replyMessageId, String template, Object... args) {
        String text = isEmpty(args) ? template : String.format(template, args);
        publisher.publishEvent(new SendTelegramMessageEvent(this, text, to, replyMessageId));
    }

    private void publishWithPhoto(Long to, List<String> photos, String template, Object... args) {
        String text = isEmpty(args) ? template : String.format(template, args);
        publisher.publishEvent(new SendPhotoEvent(this, to, photos, text));
    }


}
